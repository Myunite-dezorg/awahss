{
  "version": 3,
  "sources": ["../../.pnpm/@kirklin+logger@0.0.1/node_modules/@kirklin/logger/dist/index.mjs"],
  "sourcesContent": ["var Level = /* @__PURE__ */ ((Level2) => {\n  Level2[Level2[\"Trace\"] = 0] = \"Trace\";\n  Level2[Level2[\"Debug\"] = 1] = \"Debug\";\n  Level2[Level2[\"Info\"] = 2] = \"Info\";\n  Level2[Level2[\"Warn\"] = 3] = \"Warn\";\n  Level2[Level2[\"Error\"] = 4] = \"Error\";\n  return Level2;\n})(Level || {});\n\nfunction doLog(level, ...args) {\n  switch (level) {\n    case Level.Trace:\n      return console.trace(...args);\n    case Level.Debug:\n      return console.debug(...args);\n    case Level.Info:\n      return console.info(...args);\n    case Level.Warn:\n      return console.warn(...args);\n    case Level.Error:\n      return console.error(...args);\n  }\n}\n\nclass Field {\n  constructor(identifier, value) {\n    this.identifier = identifier;\n    this.value = value;\n  }\n  toJSON() {\n    return {\n      identifier: this.identifier,\n      value: this.value\n    };\n  }\n}\n\nclass Formatter {\n  constructor(formatType = \"%s\", useColors = true) {\n    this.formatType = formatType;\n    this.useColors = useColors;\n    this.minimumTagWidth = 5;\n    this.message = { format: \"\", args: [], fields: [] };\n  }\n  /**\n   * Add tag\n   */\n  tag(name, color) {\n    let spaced = name;\n    for (let i = name.length; i < this.minimumTagWidth; ++i) {\n      spaced += \" \";\n    }\n    this.push(`${spaced} `, color);\n  }\n  push(arg, color, weight) {\n    if (Array.isArray(arg) && arg.every((a) => a instanceof Field)) {\n      this.message.fields.push(...arg);\n      return;\n    }\n    if (this.useColors && (color || weight)) {\n      this.message.format += `${this.formatType}${this.getType(arg)}${this.formatType}`;\n      this.message.args.push(this.style(color, weight), arg, this.reset());\n    } else {\n      this.message.format += `${this.getType(arg)}`;\n      this.message.args.push(arg);\n    }\n  }\n  /**\n   * Write log entry\n   */\n  write(level) {\n    const message = this.flush();\n    this.doWrite(level, message);\n  }\n  /**\n   * Reset state and return message\n   */\n  flush() {\n    const message = this.message;\n    this.message = { format: \"\", args: [], fields: [] };\n    return message;\n  }\n  /**\n   * Return format string based on argument type\n   */\n  getType(arg) {\n    switch (typeof arg) {\n      case \"object\":\n        return \"%o\";\n      case \"number\":\n        return \"%d\";\n      default:\n        return \"%s\";\n    }\n  }\n}\n\nclass BrowserFormatter extends Formatter {\n  constructor() {\n    super(\"%c\");\n  }\n  style(color, weight) {\n    return (color ? `color: ${color};` : \"\") + (weight ? `font-weight: ${weight};` : \"\");\n  }\n  reset() {\n    return this.style(\"inherit\", \"normal\");\n  }\n  doWrite(level, message) {\n    console.groupCollapsed(message.format, ...message.args);\n    message.fields.forEach((field) => {\n      this.push(field.identifier, \"#3794ff\", \"bold\");\n      if (typeof field.value !== \"undefined\" && field.value.constructor && field.value.constructor.name) {\n        this.push(` (${field.value.constructor.name})`);\n      }\n      this.push(\": \");\n      this.push(field.value);\n      const m = this.flush();\n      doLog(level, m.format, ...m.args);\n    });\n    console.groupEnd();\n  }\n}\n\nclass ServerFormatter extends Formatter {\n  constructor() {\n    super(\"%s\", !!process.stdout.isTTY);\n  }\n  style(color, weight) {\n    return (weight === \"bold\" ? \"\\x1B[1m\" : \"\") + (color ? this.hex(color) : \"\");\n  }\n  reset() {\n    return \"\\x1B[0m\";\n  }\n  hex(hex) {\n    const [r, g, b] = this.hexToRgb(hex);\n    return `\\x1B[38;2;${r};${g};${b}m`;\n  }\n  hexToRgb(hex) {\n    const integer = parseInt(hex.substring(1), 16);\n    return [integer >> 16 & 255, integer >> 8 & 255, integer & 255];\n  }\n  doWrite(level, message) {\n    if (message.fields.length === 0) {\n      return doLog(level, `[%s] ${message.format}`, new Date().toISOString(), ...message.args);\n    }\n    const obj = {};\n    message.fields.forEach((field) => obj[field.identifier] = field.value);\n    doLog(\n      level,\n      `[%s] ${message.format} %s%s%s`,\n      new Date().toISOString(),\n      ...message.args,\n      this.style(\"#8c8c8c\"),\n      JSON.stringify(obj),\n      this.reset()\n    );\n  }\n}\n\nclass Time {\n  constructor(expected, ms) {\n    this.expected = expected;\n    this.ms = ms;\n  }\n}\n\nclass Logger {\n  constructor(_formatter, name, defaultFields, extenders = []) {\n    this._formatter = _formatter;\n    this.name = name;\n    this.defaultFields = defaultFields;\n    this.extenders = extenders;\n    this.level = Level.Info;\n    this.muted = false;\n    if (name) {\n      this.nameColor = this.hashStringToColor(name);\n    }\n    if (typeof process !== \"undefined\" && typeof process.env !== \"undefined\") {\n      switch (process.env.LOG_LEVEL) {\n        case \"trace\":\n          this.level = Level.Trace;\n          break;\n        case \"debug\":\n          this.level = Level.Debug;\n          break;\n        case \"info\":\n          this.level = Level.Info;\n          break;\n        case \"warn\":\n          this.level = Level.Warn;\n          break;\n        case \"error\":\n          this.level = Level.Error;\n          break;\n      }\n    }\n  }\n  set formatter(formatter) {\n    this._formatter = formatter;\n  }\n  get formatter() {\n    return this._formatter;\n  }\n  /**\n   * Suppresses all output\n   */\n  mute() {\n    this.muted = true;\n  }\n  extend(extender) {\n    this.extenders.push(extender);\n  }\n  info(message, ...fields) {\n    this.handle({\n      message,\n      fields,\n      tagColor: \"#66ccff\",\n      level: Level.Info\n    });\n  }\n  warn(message, ...fields) {\n    this.handle({\n      message,\n      fields,\n      tagColor: \"#ffae00\",\n      level: Level.Warn\n    });\n  }\n  trace(message, ...fields) {\n    this.handle({\n      message,\n      fields,\n      tagColor: \"#9e9e9e\",\n      level: Level.Trace\n    });\n  }\n  debug(message, ...fields) {\n    this.handle({\n      message,\n      fields,\n      tagColor: \"#ffb8da\",\n      level: Level.Debug\n    });\n  }\n  error(message, ...fields) {\n    this.handle({\n      message,\n      fields,\n      tagColor: \"#ff0000\",\n      level: Level.Error\n    });\n  }\n  /**\n   * Returns a sub-logger with a name.\n   * Each name is deterministically generated a color.\n   */\n  named(name, ...fields) {\n    const l = new Logger(this._formatter, name, fields, this.extenders);\n    if (this.muted) {\n      l.mute();\n    }\n    return l;\n  }\n  handle(message) {\n    if (this.level > message.level || this.muted) {\n      return;\n    }\n    let passedFields = message.fields || [];\n    if (typeof message.message === \"function\") {\n      const values = message.message();\n      message.message = values.shift();\n      passedFields = values;\n    }\n    const fields = this.defaultFields ? passedFields.filter((f) => !!f).concat(this.defaultFields) : passedFields.filter((f) => !!f);\n    const now = Date.now();\n    let times = [];\n    const hasFields = fields && fields.length > 0;\n    if (hasFields) {\n      times = fields.filter((f) => f.value instanceof Time);\n      this._formatter.push(fields);\n    }\n    this._formatter.tag(Level[message.level].toLowerCase(), message.tagColor);\n    if (this.name && this.nameColor) {\n      this._formatter.tag(this.name, this.nameColor);\n    }\n    this._formatter.push(message.message);\n    if (times.length > 0) {\n      times.forEach((time) => {\n        const diff = now - time.value.ms;\n        const expPer = diff / time.value.expected;\n        const min = 125 * (1 - expPer);\n        const max = 125 + min;\n        const green = expPer < 1 ? max : min;\n        const red = expPer >= 1 ? max : min;\n        this._formatter.push(` ${time.identifier}=`, \"#3390ff\");\n        this._formatter.push(\n          `${diff}ms`,\n          this.rgbToHex(red > 0 ? red : 0, green > 0 ? green : 0, 0)\n        );\n      });\n    }\n    this._formatter.write(message.level);\n    this.extenders.forEach((extender) => {\n      extender({\n        section: this.name,\n        ...message\n      });\n    });\n  }\n  /**\n   * Hashes a string.\n   */\n  djb2(str) {\n    let hash = 5381;\n    for (let i = 0; i < str.length; i++) {\n      hash = (hash << 5) + hash + str.charCodeAt(i);\n    }\n    return hash;\n  }\n  rgbToHex(r, g, b) {\n    const integer = ((Math.round(r) & 255) << 16) + ((Math.round(g) & 255) << 8) + (Math.round(b) & 255);\n    const str = integer.toString(16);\n    return `#${\"000000\".substring(str.length)}${str}`;\n  }\n  /**\n   * Generates a deterministic color from a string using hashing.\n   */\n  hashStringToColor(str) {\n    const hash = this.djb2(str);\n    return this.rgbToHex((hash & 16711680) >> 16, (hash & 65280) >> 8, hash & 255);\n  }\n}\nconst logger = new Logger(\n  typeof process === \"undefined\" || typeof process.stdout === \"undefined\" ? new BrowserFormatter() : new ServerFormatter()\n);\n\nexport { Logger, logger };\n"],
  "mappings": "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",
  "names": []
}
